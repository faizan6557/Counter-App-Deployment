stages:
  - build
  - terraform
  - deploy

variables:
  DOCKER_IMAGE: your-dockerhub-username/counter-app:latest
  CLUSTER_NAME: your-cluster-name
  AWS_REGION: your-aws-region

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
  script:
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE
  only:
    - master

terraform:
  stage: terraform
  image: hashicorp/terraform:latest
  script:
    # Configure AWS CLI
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_REGION

    # Initialize and apply Terraform configuration
    - cd terraform
    - terraform init
    - terraform apply -auto-approve
  only:
    - master

deploy:
  stage: deploy
  image: amazon/aws-cli:latest
  script:
    # Configure AWS CLI
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_REGION
    
    # Update kubeconfig
    - aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME
    
    # Deploy to EKS
    - kubectl apply -f kubernetes/namespace.yaml
    - kubectl apply -f kubernetes/deployment.yaml
    - kubectl apply -f kubernetes/service.yaml
    - kubectl apply -f kubernetes/replicaset.yaml
  only:
    - DEV
